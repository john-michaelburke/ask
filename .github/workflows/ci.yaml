name: Check, Build and Release

on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Clippy
        run: cargo clippy --all-targets -- -D warnings
      - name: Format
        run: cargo fmt --all -- --check
  build:
    needs: check
    strategy:
      matrix:
        os: 
          - { name: ubuntu-latest, short_os: linux }
          - { name: macos-latest, short_os: macos }
    runs-on: ${{ matrix.os.name }}
    steps:
      - uses: actions/checkout@v4
      - name: Build ${{ matrix.os.name }}
        run: |
          cargo install cargo-bundle
          cargo bundle --release --format deb
        if: matrix.os.name == 'ubuntu-latest'
      - name: Build ${{ matrix.os.name }}
        run: |
          cargo build --release  
        if: matrix.os.name == 'macos-latest'
      - name: Store artifact filename ${{ matrix.os.name }}
        shell: bash
        run: |
          INSTALLER_ARCHIVE_ORIG=$(find target/ -iname "*.deb")
          REPO_NAME=${{ github.repository }}
          INSTALLER_ARCHIVE=${REPO_NAME#*/}_${GITHUB_REF##*/}_${{ matrix.os.short_os }}_amd64.deb
          mv $INSTALLER_ARCHIVE_ORIG $INSTALLER_ARCHIVE
          echo $INSTALLER_ARCHIVE >archive.filename
          echo "INSTALLER_ARCHIVE=$(cat archive.filename)" >>$GITHUB_ENV
        if: matrix.os.name == 'ubuntu-latest'
      - name: Store artifact filename ${{ matrix.os.name }}
        shell: bash
        run: |
          REPO_NAME=${{ github.repository }}
          INSTALLER_BINARY=target/release/${REPO_NAME#*/}
          mv $INSTALLER_BINARY .
          INSTALLER_BINARY=$(basename $INSTALLER_BINARY)
          INSTALLER_ARCHIVE="${INSTALLER_BINARY}_${GITHUB_REF##*/}_${{ matrix.os.short_os }}_arm64.zip"
          zip -ry $INSTALLER_ARCHIVE $INSTALLER_BINARY
          echo $INSTALLER_ARCHIVE >archive.filename
          echo "INSTALLER_ARCHIVE=$(cat archive.filename)" >>$GITHUB_ENV
        if: matrix.os.name == 'macos-latest'
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os.name }}-installer
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            archive.filename
  check_build:
    needs: build
    strategy:
      matrix:
        os: 
          - { name: ubuntu-latest }
          - { name: macos-latest }
    runs-on: ${{ matrix.os.name }}
    steps:
    - name: Download Archive ${{ matrix.os.name }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.os.name }}-installer
    - name: Install ${{ matrix.os.name }}
      shell: bash
      run: |
        sudo dpkg -i $(cat archive.filename)
      if: matrix.os.name == 'ubuntu-latest'
    - name: Install ${{ matrix.os.name }}
      shell: bash
      run: |
        unzip $(cat archive.filename)
        sudo mv ask /usr/local/bin/
      if: matrix.os.name == 'macos-latest'
    - name: Check Version ${{ matrix.os.name }}
      run: ask -V
  release:
    needs: 
      - check_build
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - name: Store version and date.
        shell: bash
        run: |
          echo "DATE=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Download Linux
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-installer
          path: ubuntu
      - name: Download MacOS
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-installer
          path: macos
      - name: Prepare Release
        shell: bash
        run: |
          echo "LINUX_ARCHIVE=$(cat ubuntu/archive.filename)" >> $GITHUB_ENV
          echo "MACOS_ARCHIVE=$(cat macos/archive.filename)" >> $GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.VERSION }}-${{ env.DATE }}
          files: |
            ubuntu/${{ env.LINUX_ARCHIVE }}
            macos/${{ env.MACOS_ARCHIVE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GPT_GITHUB_TOKEN }}

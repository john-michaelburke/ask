name: Check, Build and Release

on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
      - 'v[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

jobs:
  check:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Clippy
        run: cargo clippy --all-targets -- -D warnings
      - name: Format
        run: cargo fmt --all -- --check
  build:
    needs: check
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Install cargo-bundle
        run: cargo install cargo-bundle
      - name: Build
        run: cargo bundle --release
      - name: Store artifact filename ${{ matrix.os }}
        shell: bash
        run: |
          INSTALLER_ARCHIVE=$(find target/ -iname "*.deb")
          echo $INSTALLER_ARCHIVE >archive.filename
          echo "INSTALLER_ARCHIVE=$(cat archive.filename)" >>$GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'
      - name: Store artifact filename ${{ matrix.os }}
        shell: bash
        run: |
          INSTALLER_ARCHIVE=$(find target/ -iname "*.app")
          echo $INSTALLER_ARCHIVE >archive.filename
          echo "INSTALLER_ARCHIVE=$(cat archive.filename)" >>$GITHUB_ENV
        if: matrix.os == 'macos-latest'
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-installer
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            archive.filename
  build-dmg:
    needs: build
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Store version.
        shell: bash
        run: echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Download MacOS App
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-installer
          path: macos-temp
      - name: Move App
        run: |
          mkdir macos
          mv macos-temp/$(cat macos-temp/archive.filename) macos/
      - name: Install create-dmg
        run: brew install create-dmg
      - name: Generate icns
        run: iconutil -c icns icon.iconset
      - name: Build DMG
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: |
            APP_FILE=$(basename $(find macos/ -iname "*.app"))
            create-dmg \
              --volname "Ask Installer" \
              --volicon "icon.icns" \
              --background "icons/background.png" \
              --window-pos 200 120 \
              --window-size 800 400 \
              --icon-size 100 \
              --icon "$APP_FILE" 200 190 \
              --hide-extension "$APP_FILE" \
              --app-drop-link 600 185 \
              "Ask-Installer_${{ env.VERSION }}.dmg" \
              "macos/"
      - name: Store artifact filename
        shell: bash
        run: |
          INSTALLER_ARCHIVE=$(find . -iname "*.dmg")
          echo $INSTALLER_ARCHIVE >archive.filename
          echo "INSTALLER_ARCHIVE=$(cat archive.filename)" >>$GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: macos-latest-installer-dmg
          path: |
            ${{ env.INSTALLER_ARCHIVE }}
            archive.filename
  release:
    needs: 
      - build
      - build-dmg
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    steps:
      - name: Store version and date.
        shell: bash
        run: |
          echo "DATE=$(date '+%Y-%m-%d')" >> $GITHUB_ENV
          echo "VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Download Linux
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-installer
          path: linux
      - name: Download MacOS
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-installer-dmg
          path: macos
      - name: Prepare Release
        shell: bash
        run: |
          echo "LINUX_ARCHIVE=$(cat linux/archive.filename)" >> $GITHUB_ENV
          echo "MACOS_ARCHIVE=$(cat macos/archive.filename)" >> $GITHUB_ENV
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.VERSION }}-${{ env.DATE }}
          files: |
            linux/${{ env.LINUX_ARCHIVE }}
            macos/${{ env.MACOS_ARCHIVE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GPT_GITHUB_TOKEN }}
